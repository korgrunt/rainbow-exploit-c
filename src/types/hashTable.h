#if !defined(__HASH_TABLE__H__)
#define __HASH_TABLE__H__
#include <limits.h>
#include <pthread.h>

typedef struct KeyValuePair
{
    unsigned char *hashValue;
    long seekPos;
    struct KeyValuePair *next;
    pthread_mutex_t node_mutex;
} KeyValuePair;

typedef struct Layer_2_HashTable
{
    struct KeyValuePair *keyValuePairHead;
} Layer_2_HashTable;

typedef struct Layer_1_HashTable
{
    struct Layer_2_HashTable *thirdByteLayer[UCHAR_MAX + 1];
} Layer_1_HashTable;

typedef struct Layer_0_HashTable
{
    struct Layer_1_HashTable *secondByteLayer[UCHAR_MAX + 1];
} Layer_0_HashTable;

typedef struct HashTableMultiLayer
{
    struct Layer_0_HashTable *firstByteLayer[UCHAR_MAX + 1];
    pthread_mutex_t table_mutex;
} HashTableMultiLayer;

HashTableMultiLayer *createHashTableMultiLayer();
void insertInHashTableML(HashTableMultiLayer *hashTableML, unsigned char hash[], long seekPos, int hashLength);
long searchInHashTableML(HashTableMultiLayer *hashTableML, unsigned char hash[], int hashLength);
void printHashTableML(HashTableMultiLayer *hashTableML, int hashLength);
void indexingHash(FILE *rainbowTable, HashTableMultiLayer *hashTableML, int hashLength);
void freeHashTable(HashTableMultiLayer *hashTableML);

#endif
